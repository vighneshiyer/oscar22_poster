{% extends "poster.jinja2" %}

{## Header ##}

{% set poster_title = "Improving Verification Infrastructure for Chisel RTL" %}
{# ‘poster_subtitle’ is optional; use "" to hide it #}
{% set poster_subtitle = "" %}
{# Change ‘venue’ to a conference or workshop name if any #}
{% set venue = "SLICE Winter 2023 Retreat" %}
{# ‘webpage_title’ is displayed in the browser’s top bar #}
{% set webpage_title = poster_title + " — " + poster_subtitle %}
{# ‘project_url’ is used in the footer and for the logo #}
{% set project_url = "https://github.com/vighneshiyer/simcommand" %}

{# Publication info is hidden by default (.publication-info in CSS) #}
{% set pub_datetime_iso = "2020-09-08" %}
{% set pub_date = "September 8, 2020" %}

{% block custom_head %}
<style type="text/css">
    html { font-size: 1.15rem }
    .container{
      display: grid;
      grid-auto-flow: column;
      column-gap: 1em;
    }
    th {
      border-bottom: 1px solid;
    }
</style>
{% endblock %}

{% block authors %}
  {# Put authors here, with one link per author. #}
  <a property="author" style="font-size:90%;">Vighnesh Iyer, Kevin Laeufer, Rohit Agarwal, Young-Jin Park, Andy Yin, Oliver Yu, Bryan Ngo, Shawn Kong, Grace Chen, Yi Mu, Sungwoong Ha, Bora Nikolic</a>
{% endblock %}

{% block affiliations %}
  <a property="sourceOrganization">UC Berkeley</a>
{% endblock %}

{# Project logos shown on the left side #}
{% block project_logos %}
  <!--<a href="{{ project_url }}"><img src="logo.svg" alt="Tutorial logo"></a>-->
  <!--<a href="{{ project_url }}"><img src="chisel_logo.svg" alt="Chisel - chiseltest"></a>-->
  <a href="https://slice.eecs.berkeley.edu"><img style="background: white" src="slice_logo.png" alt="Berkeley SLICE Lab Logo"></a>
{% endblock %}

{# Extra logos shown on the right side #}
{% block logos %}
  <a href="https://berkeley.edu"><img style="background: white" src="berkeley_logo.svg" alt="University of California, Berkeley"></a>
{% endblock %}

{### Footer ##}

{% block project_link %}
  <a href="{{ project_url }}">{{ project_url }}</a>
{% endblock %}

{% block contact_information %}
  vighnesh.iyer@berkeley.edu
{% endblock %}

{% block credits %}
  <span class="credits">
    SLICE Retreat, Winter 2023
  </span>
{% endblock %}

{% block contents %}
  <article style="hyphens:none;">
    <header><h3>Motivation</h3></header>
    <ul>
    <li>Move beyond SystemVerilog + UVM without compromising features or performance</li>
    <li>Design new tools that leverage open source hardware generator ecosystems</li>
    </ul>
    </article>

  <!--<article style="hyphens:none;">
  <header><h3>Simulator Independent Coverage</h3></header>
  </article>-->

  <article style="hyphens:none;">
  {# Using <h3> inside the <header> makes the structure evident to screen readers #}
  <header><h3>SimCommand Overview</h3></header>
  <p><strong>Goal:</strong> A Scala-embedded testbench API with fork/join support and performance parity with SystemVerilog testbenches</p>
  <!--<p><strong>Implementation:</strong> fork/join with cooperatively yielding 'threads', leverage chiseltest as simulator API</p>-->
  <ul>
  <li>Separation of description and interpretation of testbench actions</li>
  <li>Threads are just pointers to continuations → fast thread pause/resume</li>
  <li>A <code>Command[R]</code> is a <em>description</em> of testbench actions which terminates with a value of type <code>R</code></li>
  </ul>

<pre class="fragment"><code class="language-scala medium">val program: Command[Boolean] = for {
    _ <- poke(dut.enq.valid, 1.B)
    _ <- step(1)
    p <- peek(dut.deq.valid)
} yield p.litValue == 1</pre></code>

<img class="fragment" src="./command_sequencing.svg"/>
</article>

<article style="hyphens:none;">
<header><h3>SimCommand Channels</h3></header>
<p class="center">Channels enable deterministic thread-to-thread communication, similar to SystemVerilog mailboxes or golang channels.</p>

<pre class="fragment"><code class="language-scala medium">ch <- makeChannel[Integer](size=10)
_ <- put(ch, 1)
t <- fork( for { v <- getBlocking(ch) } yield v )
v <- join(t)
</pre></code>
</article>

<article style="hyphens:none;">
<header><h3>SimCommand Imperative Interpreter</h3></header>
<ul>
<li>Older purely recursive interpreter used no mutable data structures and required unnecessary allocations.</li>
<li>New imperative interpreter maintains an explicit stack per thread and <strong>improves performance by 30%</strong>.</li>
</article>

<article style="hyphens:none;">
<header><h3>SimCommand Tail Recursion Primitive</h3></header>
<ul>
<li>Naive monadic recursion can blow up the stack</li>
<li>One solution is <em>trampolining</em> where the stack is dumped to the heap on every recursive call.</li>
</ul>

<pre class="fragment"><code class="language-scala small">def tailRecM[R, R2](r: R)
  (f: R => Command[Either[R, R2]]): Command[R2] = {
  f(r).flatMap {
    case Left(value) => tailRecM(value)(f)
    case Right(value) => lift(value)
  }
}</pre></code>

<p class="center">However, trampolining is slow. A recursion <em>primitive</em> that elides trampolining demonstrates <strong>400% performance improvement</strong>.</p>
</article>

<article style="hyphens:none;">
  <header><h3>Chiseltest ⬌ RTL Simulator FFI</h3></header>
  <img width="80%" src="./command_interpretation.svg"/>

  <ul>
  <li>The foreign function interface (FFI) linking chiseltest on the JVM and the RTL simulation (Verilator) in C++ is a bottleneck</li>
  <li>Using JNI vs JNA as the FFI API <strong>improves performance by up to 10x</strong> - WIP: integration into chiseltest</li>
  </ul>
  </article>

<article style="hyphens:none;">
  <header><h3>Lightweight "HLS" Recipes for Chisel</h3></header>
  <ul>
  <li>Writing FSMs manually in RTL is error prone and obscures control flow intent</li>
  <li>WIP: a mini-DSL to describe imperative control flow that compiles to Chisel, inspired by Recipes in Blarney HDL</li>
  </ul>
  <pre class="fragment"><code class="language-scala small">axi.ar_ready := 1.B
axi.r_valid := 0.B
val readOnce = Sequential {
  WaitUntil(axi.ar_valid === 1.B)
  Action {
    axi.r_data := mem.read(axi.ar_addr)
    axi.r_valid := 1.B
  }
  WaitUntil(axi.r_ready === 1.B)
  Tick()
}
Forever(readOnce).compile()</pre></code>
</article>

<article style="hyphens:none;">
  <header><h3>"SVA" for Chisel</h3></header>
  <ul>
  <li>Sequence library to describe temporal properties in Chisel</li>
  <li>Supports a subset of linear PSL (sequence combinators + bounded delays + LTL operators)</li>
  <li>2 backends: naive monitor automata synthesis, SPOT-driven optimized automata synthesis</li>
  </ul>
  <pre class="fragment"><code class="language-scala medium">class Example extends Module {
  val a, b = Reg(Bool())
  val c = Reg(UInt(8.W))
  assert(a |=> b)
  assert(a ###1 b |=> (c > 15.U))
}</pre></code>

  <strong>TODO: add picture of automata + PSL representation</strong>
  <strong>TODO: add link to github repo</strong>
  </article>

<!--<article style="hyphens:none;">
  <header><h3>FIRRTL → Graph for Netlist Embedding</h3></header>
  <ul>
  <li></li>
  </ul>
</article>-->

<article style="hyphens:none;">
  <header><h3>Generative Parametric Random Stimulus API</h3></header>
  <p class="center">WIP: <a href="https://github.com/girantinas/randomapi">github.com/girantinas/randomapi</a>. A parameteric hardware stimgen API written in Scala.</p>
  <pre><code class="language-scala medium">enum Operator: case Add, Sub, Mul, Div

def sexpr(operator: Gen[Operator],
  literal1: Gen[Int],
  literal2: Gen[Int]): Gen[SExpr] = for {
    op <- operator
    lit1 <- literal1
    lit2 <- literal2
} yield SExpr.Expression(...)

val opGen = Gen.oneOf(Operator.values)
val lit1 = Gen.range(0, 10)
val lit2 = Gen.range(11, 20)
sexpr(...).generate(ScalaRandom)
sexpr(...).generate(Stream[Byte])</code></pre>
  </article>

  <!--<figure style="flex-grow: 9999999">
    <img style="width: 70%" src="logo.svg" alt="Project logo" />
    <figcaption>A stand-alone figure to fill the remaining space.</figcaption>
    </figure>
    -->
{% endblock %}
